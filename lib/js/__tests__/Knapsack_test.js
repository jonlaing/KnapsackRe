// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Jest     = require("bs-jest/lib/js/src/jest.js");
var List     = require("bs-platform/lib/js/list.js");
var Knapsack = require("../src/Knapsack.js");

function totalItemSize(param) {
  return List.fold_left((function (acc, i) {
                return acc + i[/* weight */0] | 0;
              }), 0, param);
}

describe("Sort", (function () {
        describe("Item.sort", (function () {
                Jest.test("unequal weights", (function () {
                        var sorted = List.sort(Knapsack.BasicItem[/* sort */2], /* :: */[
                              /* record */[
                                /* weight */2,
                                /* value */1
                              ],
                              /* :: */[
                                /* record */[
                                  /* weight */1,
                                  /* value */6
                                ],
                                /* [] */0
                              ]
                            ]);
                        var exit = 0;
                        if (sorted) {
                          var match = sorted[1];
                          if (match) {
                            if (match[1]) {
                              exit = 1;
                            } else {
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                            6,
                                            1
                                          ])(Jest.Expect[/* expect */0](/* tuple */[
                                              sorted[0][/* value */1],
                                              match[0][/* value */1]
                                            ]));
                            }
                          } else {
                            exit = 1;
                          }
                        } else {
                          exit = 1;
                        }
                        if (exit === 1) {
                          return Jest.Expect[/* toBe */2](/* tuple */[
                                        1,
                                        1
                                      ])(Jest.Expect[/* expect */0](/* tuple */[
                                          0,
                                          0
                                        ]));
                        }
                        
                      }));
                return Jest.test("equal weights", (function () {
                              var sorted = List.sort(Knapsack.BasicItem[/* sort */2], /* :: */[
                                    /* record */[
                                      /* weight */1,
                                      /* value */1
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* weight */1,
                                        /* value */6
                                      ],
                                      /* [] */0
                                    ]
                                  ]);
                              var exit = 0;
                              if (sorted) {
                                var match = sorted[1];
                                if (match) {
                                  if (match[1]) {
                                    exit = 1;
                                  } else {
                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  1,
                                                  6
                                                ])(Jest.Expect[/* expect */0](/* tuple */[
                                                    sorted[0][/* value */1],
                                                    match[0][/* value */1]
                                                  ]));
                                  }
                                } else {
                                  exit = 1;
                                }
                              } else {
                                exit = 1;
                              }
                              if (exit === 1) {
                                return Jest.Expect[/* toBe */2](/* tuple */[
                                              1,
                                              1
                                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                                0,
                                                0
                                              ]));
                              }
                              
                            }));
              }));
        return /* () */0;
      }));

describe("Knapsack", (function () {
        var items = List.sort(Knapsack.BasicItem[/* sort */2], /* :: */[
              /* record */[
                /* weight */2,
                /* value */1
              ],
              /* :: */[
                /* record */[
                  /* weight */1,
                  /* value */6
                ],
                /* :: */[
                  /* record */[
                    /* weight */4,
                    /* value */3
                  ],
                  /* :: */[
                    /* record */[
                      /* weight */3,
                      /* value */2
                    ],
                    /* :: */[
                      /* record */[
                        /* weight */2,
                        /* value */3
                      ],
                      /* :: */[
                        /* record */[
                          /* weight */9,
                          /* value */1
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
        var totalSize = totalItemSize(items);
        Jest.test("filled knapsack", (function () {
                var sack = Knapsack.BasicKnapsack[/* make */0](totalSize);
                var res = Knapsack.BasicKnapsack[/* pack */6](sack, items);
                if (res[1]) {
                  return Jest.Expect[/* toBe */2](0)(Jest.Expect[/* expect */0](1));
                } else {
                  return Jest.Expect[/* toEqual */12](List.length(items))(Jest.Expect[/* expect */0](List.length(res[0][/* items */1])));
                }
              }));
        Jest.test("too small knapsack", (function () {
                var sack = Knapsack.BasicKnapsack[/* make */0](totalSize - 5 | 0);
                var match = Knapsack.BasicKnapsack[/* pack */6](sack, items);
                return Jest.Expect[/* toEqual */12](/* tuple */[
                              List.length(items),
                              0
                            ])(Jest.Expect[/* not_ */22](Jest.Expect[/* expect */0](/* tuple */[
                                    List.length(match[0][/* items */1]),
                                    List.length(match[1])
                                  ])));
              }));
        Jest.test("will append to partially fillded knapsack", (function () {
                var sack = Knapsack.BasicKnapsack[/* make */0](totalSize + 5 | 0);
                var match = Knapsack.BasicKnapsack[/* pack */6](sack, items);
                var match$1 = Knapsack.BasicKnapsack[/* pack */6](match[0], /* :: */[
                      /* record */[
                        /* weight */5,
                        /* value */6
                      ],
                      /* [] */0
                    ]);
                return Jest.Expect[/* toEqual */12](List.length(items) + 1 | 0)(Jest.Expect[/* expect */0](List.length(match$1[0][/* items */1])));
              }));
        describe("monadic and functor operations", (function () {
                describe("functor", (function () {
                        Jest.test("will transform items if they fit", (function () {
                                var sack = Knapsack.BasicKnapsack[/* make */0](5);
                                var newSack = Knapsack.BasicKnapsack[/* map */2]((function (items) {
                                        return /* :: */[
                                                /* record */[
                                                  /* weight */5,
                                                  /* value */1
                                                ],
                                                items
                                              ];
                                      }), sack);
                                return Jest.Expect[/* toEqual */12](/* tuple */[
                                              5,
                                              5
                                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                                newSack[/* size */0],
                                                totalItemSize(newSack[/* items */1])
                                              ]));
                              }));
                        return Jest.test("won't transform items if they don't fit", (function () {
                                      var sack = Knapsack.BasicKnapsack[/* make */0](4);
                                      var newSack = Knapsack.BasicKnapsack[/* map */2]((function (items) {
                                              return /* :: */[
                                                      /* record */[
                                                        /* weight */5,
                                                        /* value */1
                                                      ],
                                                      items
                                                    ];
                                            }), sack);
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                    4,
                                                    0
                                                  ])(Jest.Expect[/* expect */0](/* tuple */[
                                                      newSack[/* size */0],
                                                      totalItemSize(newSack[/* items */1])
                                                    ]));
                                    }));
                      }));
                describe("bind", (function () {
                        Jest.test("binds sacks if they fit", (function () {
                                var addItem = function (i) {
                                  var partial_arg = Knapsack.BasicKnapsack[/* map */2];
                                  return (function (param) {
                                      return partial_arg((function (items) {
                                                    return /* :: */[
                                                            i,
                                                            items
                                                          ];
                                                  }), param);
                                    });
                                };
                                var sack = Knapsack.BasicKnapsack[/* make */0](5);
                                var newSack = Knapsack.BasicKnapsack[/* >>= */4](Knapsack.BasicKnapsack[/* >>= */4](sack, addItem(/* record */[
                                              /* weight */2,
                                              /* value */1
                                            ])), addItem(/* record */[
                                          /* weight */3,
                                          /* value */2
                                        ]));
                                return Jest.Expect[/* toEqual */12](/* tuple */[
                                              5,
                                              5
                                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                                newSack[/* size */0],
                                                totalItemSize(newSack[/* items */1])
                                              ]));
                              }));
                        return Jest.test("binds only as many sacks as fit", (function () {
                                      var addItem = function (i) {
                                        var partial_arg = Knapsack.BasicKnapsack[/* map */2];
                                        return (function (param) {
                                            return partial_arg((function (items) {
                                                          return /* :: */[
                                                                  i,
                                                                  items
                                                                ];
                                                        }), param);
                                          });
                                      };
                                      var sack = Knapsack.BasicKnapsack[/* make */0](4);
                                      var newSack = Knapsack.BasicKnapsack[/* >>= */4](Knapsack.BasicKnapsack[/* >>= */4](sack, addItem(/* record */[
                                                    /* weight */2,
                                                    /* value */1
                                                  ])), addItem(/* record */[
                                                /* weight */3,
                                                /* value */2
                                              ]));
                                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                                    4,
                                                    2
                                                  ])(Jest.Expect[/* expect */0](/* tuple */[
                                                      newSack[/* size */0],
                                                      totalItemSize(newSack[/* items */1])
                                                    ]));
                                    }));
                      }));
                return /* () */0;
              }));
        return /* () */0;
      }));

exports.totalItemSize = totalItemSize;
/*  Not a pure module */
