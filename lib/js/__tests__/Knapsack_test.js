// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var Jest     = require("bs-jest/lib/js/src/jest.js");
var List     = require("bs-platform/lib/js/list.js");
var BatList  = require("bs-batteries/lib/js/src/batList.js");
var Knapsack = require("../src/knapsack.js");

function totalItemSize(param) {
  return List.fold_left((function (acc, i) {
                return acc + i[/* weight */0] | 0;
              }), 0, param);
}

describe("Sort", (function () {
        describe("Item.sort", (function () {
                Jest.test("unequal weights", (function () {
                        var sorted = BatList.sort(Knapsack.BasicItem[/* sort */1], /* :: */[
                              /* record */[
                                /* weight */2,
                                /* value */1
                              ],
                              /* :: */[
                                /* record */[
                                  /* weight */1,
                                  /* value */6
                                ],
                                /* [] */0
                              ]
                            ]);
                        var exit = 0;
                        if (sorted) {
                          var match = sorted[1];
                          if (match) {
                            if (match[1]) {
                              exit = 1;
                            } else {
                              return Jest.Expect[/* toEqual */12](/* tuple */[
                                            6,
                                            1
                                          ])(Jest.Expect[/* expect */0](/* tuple */[
                                              sorted[0][/* value */1],
                                              match[0][/* value */1]
                                            ]));
                            }
                          } else {
                            exit = 1;
                          }
                        } else {
                          exit = 1;
                        }
                        if (exit === 1) {
                          return Jest.Expect[/* toBe */2](/* tuple */[
                                        1,
                                        1
                                      ])(Jest.Expect[/* expect */0](/* tuple */[
                                          0,
                                          0
                                        ]));
                        }
                        
                      }));
                return Jest.test("equal weights", (function () {
                              var sorted = BatList.sort(Knapsack.BasicItem[/* sort */1], /* :: */[
                                    /* record */[
                                      /* weight */1,
                                      /* value */1
                                    ],
                                    /* :: */[
                                      /* record */[
                                        /* weight */1,
                                        /* value */6
                                      ],
                                      /* [] */0
                                    ]
                                  ]);
                              var exit = 0;
                              if (sorted) {
                                var match = sorted[1];
                                if (match) {
                                  if (match[1]) {
                                    exit = 1;
                                  } else {
                                    return Jest.Expect[/* toEqual */12](/* tuple */[
                                                  1,
                                                  6
                                                ])(Jest.Expect[/* expect */0](/* tuple */[
                                                    sorted[0][/* value */1],
                                                    match[0][/* value */1]
                                                  ]));
                                  }
                                } else {
                                  exit = 1;
                                }
                              } else {
                                exit = 1;
                              }
                              if (exit === 1) {
                                return Jest.Expect[/* toBe */2](/* tuple */[
                                              1,
                                              1
                                            ])(Jest.Expect[/* expect */0](/* tuple */[
                                                0,
                                                0
                                              ]));
                              }
                              
                            }));
              }));
        return /* () */0;
      }));

describe("Knapsack", (function () {
        var items = /* :: */[
          /* record */[
            /* weight */2,
            /* value */1
          ],
          /* :: */[
            /* record */[
              /* weight */1,
              /* value */6
            ],
            /* :: */[
              /* record */[
                /* weight */4,
                /* value */3
              ],
              /* :: */[
                /* record */[
                  /* weight */3,
                  /* value */2
                ],
                /* :: */[
                  /* record */[
                    /* weight */2,
                    /* value */3
                  ],
                  /* :: */[
                    /* record */[
                      /* weight */9,
                      /* value */1
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ];
        var totalSize = totalItemSize(items);
        describe("finding the best", (function () {
                return Jest.test("gets the right index for one element", (function () {
                              var sack = Knapsack.BasicKnapsack[/* make */0](1);
                              var res = Knapsack.BasicKnapsack[/* findBest */6](sack, items);
                              if (res) {
                                var item = BatList.at(items, res[0]);
                                return Jest.Expect[/* toEqual */12](1)(Jest.Expect[/* expect */0](item[/* weight */0]));
                              } else {
                                return Jest.Expect[/* toEqual */12](0)(Jest.Expect[/* expect */0](1));
                              }
                            }));
              }));
        describe("appending", (function () {
                var sack = Knapsack.BasicKnapsack[/* make */0](3);
                Jest.test("can append", (function () {
                        var item = /* record */[
                          /* weight */2,
                          /* value */1
                        ];
                        var res = Knapsack.BasicKnapsack[/* append */5](sack, item);
                        var exit = 0;
                        if (res.tag) {
                          exit = 1;
                        } else {
                          var match = res[0][/* items */1];
                          if (match) {
                            if (match[1]) {
                              exit = 1;
                            } else {
                              return Jest.Expect[/* toEqual */12](item)(Jest.Expect[/* expect */0](match[0]));
                            }
                          } else {
                            exit = 1;
                          }
                        }
                        if (exit === 1) {
                          return Jest.Expect[/* toBe */2](item)(Jest.Expect[/* not_ */22](Jest.Expect[/* expect */0](item)));
                        }
                        
                      }));
                return Jest.test("can't append", (function () {
                              var res = Knapsack.BasicKnapsack[/* append */5](sack, /* record */[
                                    /* weight */4,
                                    /* value */1
                                  ]);
                              if (res.tag) {
                                return Jest.Expect[/* toEqual */12](sack)(Jest.Expect[/* expect */0](res[0]));
                              } else {
                                return Jest.Expect[/* toEqual */12](sack)(Jest.Expect[/* not_ */22](Jest.Expect[/* expect */0](Knapsack.BasicKnapsack[/* make */0](0))));
                              }
                            }));
              }));
        Jest.test("filled knapsack", (function () {
                var sack = Knapsack.BasicKnapsack[/* make */0](totalSize);
                var res = Knapsack.BasicKnapsack[/* pack */7](sack, items);
                if (res[1]) {
                  return Jest.Expect[/* toBe */2](0)(Jest.Expect[/* expect */0](1));
                } else {
                  return Jest.Expect[/* toEqual */12](List.length(items))(Jest.Expect[/* expect */0](List.length(res[0][/* items */1])));
                }
              }));
        return Jest.test("unfilled knapsack", (function () {
                      var sack = Knapsack.BasicKnapsack[/* make */0](totalSize - 5 | 0);
                      var match = Knapsack.BasicKnapsack[/* pack */7](sack, items);
                      return Jest.Expect[/* toEqual */12](/* tuple */[
                                    List.length(items),
                                    0
                                  ])(Jest.Expect[/* not_ */22](Jest.Expect[/* expect */0](/* tuple */[
                                          List.length(match[0][/* items */1]),
                                          List.length(match[1])
                                        ])));
                    }));
      }));

exports.totalItemSize = totalItemSize;
/*  Not a pure module */
