// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Hashtbl                 = require("bs-platform/lib/js/hashtbl.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function Make(funarg) {
  var totalItemSize = function (param) {
    return List.fold_left((function (acc, i) {
                  return acc + Curry._1(funarg[/* size */0], i) | 0;
                }), 0, param);
  };
  var filledSpace = function (param) {
    return totalItemSize(param[/* items */1]);
  };
  var emptySpace = function (sack) {
    return sack[/* size */0] - filledSpace(sack) | 0;
  };
  var make = function (size) {
    return /* record */[
            /* size */size,
            /* items : [] */0
          ];
  };
  var map = function (f, sack) {
    var items = Curry._1(f, sack[/* items */1]);
    var match = +(totalItemSize(items) <= sack[/* size */0]);
    if (match !== 0) {
      return /* record */[
              /* size */sack[/* size */0],
              /* items */items
            ];
    } else {
      return sack;
    }
  };
  var bind = function (sack, f) {
    var newSack = Curry._1(f, sack);
    var match = +(totalItemSize(newSack[/* items */1]) <= newSack[/* size */0]);
    if (match !== 0) {
      return newSack;
    } else {
      return sack;
    }
  };
  var $$return = function (items) {
    return /* record */[
            /* size */totalItemSize(items),
            /* items */items
          ];
  };
  var bestFit = function (cache, i, maxSize, items) {
    var hashKey = /* tuple */[
      i,
      maxSize,
      items
    ];
    try {
      return Hashtbl.find(cache, hashKey);
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        if (i !== 0) {
          var item = List.nth(items, i - 1 | 0);
          var itemSize = Curry._1(funarg[/* size */0], item);
          var itemValue = Curry._1(funarg[/* value */1], item);
          var fit = itemSize > maxSize ? bestFit(cache, i - 1 | 0, maxSize, items) : Pervasives.max(bestFit(cache, i - 1 | 0, maxSize, items), bestFit(cache, i - 1 | 0, maxSize - itemSize | 0, items) + itemValue | 0);
          Hashtbl.add(cache, hashKey, fit);
          return fit;
        } else {
          return 0;
        }
      } else {
        throw exn;
      }
    }
  };
  var accept = function (_i, maxSize, items, _itemsDiff) {
    while(true) {
      var itemsDiff = _itemsDiff;
      var i = _i;
      if (i !== 0) {
        var item = List.nth(items, i - 1 | 0);
        var rejected = itemsDiff[1];
        var accepted = itemsDiff[0];
        var maxFitCache = Hashtbl.create(/* None */0, 0);
        var bestFit$1 = (function(maxFitCache){
        return function bestFit$1(param, param$1, param$2) {
          return bestFit(maxFitCache, param, param$1, param$2);
        }
        }(maxFitCache));
        var match = +(bestFit$1(i, maxSize, items) === bestFit$1(i - 1 | 0, maxSize, items));
        if (match !== 0) {
          _itemsDiff = /* tuple */[
            accepted,
            /* :: */[
              item,
              rejected
            ]
          ];
          _i = i - 1 | 0;
          continue ;
          
        } else {
          _itemsDiff = /* tuple */[
            /* :: */[
              item,
              accepted
            ],
            rejected
          ];
          _i = i - 1 | 0;
          continue ;
          
        }
      } else {
        return itemsDiff;
      }
    };
  };
  var pack = function (sack, items) {
    var match = accept(List.length(items), emptySpace(sack), items, /* tuple */[
          /* [] */0,
          /* [] */0
        ]);
    return /* tuple */[
            /* record */[
              /* size */sack[/* size */0],
              /* items */List.append(sack[/* items */1], match[0])
            ],
            match[1]
          ];
  };
  return /* module */[
          /* make */make,
          /* filledSpace */filledSpace,
          /* map */map,
          /* bind */bind,
          /* >>= */bind,
          /* return */$$return,
          /* pack */pack
        ];
}

function size(param) {
  return param[/* weight */0];
}

function value(param) {
  return param[/* value */1];
}

function sort(param, param$1) {
  var s1 = param$1[/* weight */0];
  var s0 = param[/* weight */0];
  var match = +(s0 === s1);
  if (match !== 0) {
    return param[/* value */1] - param$1[/* value */1] | 0;
  } else {
    return s0 - s1 | 0;
  }
}

var BasicItem = /* module */[
  /* size */size,
  /* value */value,
  /* sort */sort
];

function totalItemSize(param) {
  return List.fold_left((function (acc, i) {
                return acc + size(i) | 0;
              }), 0, param);
}

function filledSpace(param) {
  return totalItemSize(param[/* items */1]);
}

function emptySpace(sack) {
  return sack[/* size */0] - filledSpace(sack) | 0;
}

function make(size) {
  return /* record */[
          /* size */size,
          /* items : [] */0
        ];
}

function map(f, sack) {
  var items = Curry._1(f, sack[/* items */1]);
  var match = +(totalItemSize(items) <= sack[/* size */0]);
  if (match !== 0) {
    return /* record */[
            /* size */sack[/* size */0],
            /* items */items
          ];
  } else {
    return sack;
  }
}

function bind(sack, f) {
  var newSack = Curry._1(f, sack);
  var match = +(totalItemSize(newSack[/* items */1]) <= newSack[/* size */0]);
  if (match !== 0) {
    return newSack;
  } else {
    return sack;
  }
}

function $$return(items) {
  return /* record */[
          /* size */totalItemSize(items),
          /* items */items
        ];
}

function bestFit(cache, i, maxSize, items) {
  var hashKey = /* tuple */[
    i,
    maxSize,
    items
  ];
  try {
    return Hashtbl.find(cache, hashKey);
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      if (i !== 0) {
        var item = List.nth(items, i - 1 | 0);
        var itemSize = size(item);
        var itemValue = value(item);
        var fit = itemSize > maxSize ? bestFit(cache, i - 1 | 0, maxSize, items) : Pervasives.max(bestFit(cache, i - 1 | 0, maxSize, items), bestFit(cache, i - 1 | 0, maxSize - itemSize | 0, items) + itemValue | 0);
        Hashtbl.add(cache, hashKey, fit);
        return fit;
      } else {
        return 0;
      }
    } else {
      throw exn;
    }
  }
}

function accept(_i, maxSize, items, _itemsDiff) {
  while(true) {
    var itemsDiff = _itemsDiff;
    var i = _i;
    if (i !== 0) {
      var item = List.nth(items, i - 1 | 0);
      var rejected = itemsDiff[1];
      var accepted = itemsDiff[0];
      var maxFitCache = Hashtbl.create(/* None */0, 0);
      var bestFit$1 = (function(maxFitCache){
      return function bestFit$1(param, param$1, param$2) {
        return bestFit(maxFitCache, param, param$1, param$2);
      }
      }(maxFitCache));
      var match = +(bestFit$1(i, maxSize, items) === bestFit$1(i - 1 | 0, maxSize, items));
      if (match !== 0) {
        _itemsDiff = /* tuple */[
          accepted,
          /* :: */[
            item,
            rejected
          ]
        ];
        _i = i - 1 | 0;
        continue ;
        
      } else {
        _itemsDiff = /* tuple */[
          /* :: */[
            item,
            accepted
          ],
          rejected
        ];
        _i = i - 1 | 0;
        continue ;
        
      }
    } else {
      return itemsDiff;
    }
  };
}

function pack(sack, items) {
  var match = accept(List.length(items), emptySpace(sack), items, /* tuple */[
        /* [] */0,
        /* [] */0
      ]);
  return /* tuple */[
          /* record */[
            /* size */sack[/* size */0],
            /* items */List.append(sack[/* items */1], match[0])
          ],
          match[1]
        ];
}

var BasicKnapsack = /* module */[
  /* make */make,
  /* filledSpace */filledSpace,
  /* map */map,
  /* bind */bind,
  /* >>= */bind,
  /* return */$$return,
  /* pack */pack
];

exports.Make          = Make;
exports.BasicItem     = BasicItem;
exports.BasicKnapsack = BasicKnapsack;
/* Hashtbl Not a pure module */
