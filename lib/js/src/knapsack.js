// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var List    = require("bs-platform/lib/js/list.js");
var Curry   = require("bs-platform/lib/js/curry.js");
var Option  = require("bs-batteries/lib/js/src/option.js");
var BatList = require("bs-batteries/lib/js/src/batList.js");

function Make(funarg) {
  var filledSpace = function (param) {
    return List.fold_left((function (total, item) {
                  return total + Curry._1(funarg[/* size */0], item) | 0;
                }), 0, param[1]);
  };
  var emptySpace = function (sack) {
    return sack[0] - filledSpace(sack) | 0;
  };
  var willFit = function (sack, item) {
    return +(Curry._1(funarg[/* size */0], item) <= emptySpace(sack));
  };
  var append = function (sack, item) {
    var itemSize = Curry._1(funarg[/* size */0], item);
    var match = willFit(sack, item);
    if (match !== 0) {
      return /* Some */[/* Sack */[
                sack[0] + itemSize | 0,
                /* :: */[
                  item,
                  sack[1]
                ]
              ]];
    } else {
      return /* None */0;
    }
  };
  var findBest_ = function (_i, sack, _items) {
    while(true) {
      var items = _items;
      var i = _i;
      if (items) {
        var match = willFit(sack, items[0]);
        if (match !== 0) {
          return /* Some */[i];
        } else {
          _items = items[1];
          _i = i + 1 | 0;
          continue ;
          
        }
      } else {
        return /* None */0;
      }
    };
  };
  var findBest = function (sack, items) {
    return findBest_(0, sack, items);
  };
  var pack = function (_sack, _items) {
    while(true) {
      var items = _items;
      var sack = _sack;
      var match = findBest_(0, sack, items);
      if (match) {
        var i = match[0];
        var item = BatList.at(items, i);
        var s = Option.$$default(sack, append(sack, item));
        var match$1 = willFit(sack, item);
        var xs = match$1 !== 0 ? BatList.remove_at(i, items) : items;
        _items = xs;
        _sack = s;
        continue ;
        
      } else {
        return /* tuple */[
                sack,
                items
              ];
      }
    };
  };
  return /* module */[
          /* append */append,
          /* findBest */findBest,
          /* pack */pack
        ];
}

function size(prim) {
  return prim[0];
}

function sort(param, param$1) {
  return (param[0] - param$1[0] | 0) + (param[1] - param$1[1] | 0) | 0;
}

var BasicItem = /* module */[
  /* size */size,
  /* sort */sort
];

function filledSpace(param) {
  return List.fold_left((function (total, item) {
                return total + item[0] | 0;
              }), 0, param[1]);
}

function emptySpace(sack) {
  return sack[0] - filledSpace(sack) | 0;
}

function willFit(sack, item) {
  return +(item[0] <= emptySpace(sack));
}

function append(sack, item) {
  var itemSize = item[0];
  var match = willFit(sack, item);
  if (match !== 0) {
    return /* Some */[/* Sack */[
              sack[0] + itemSize | 0,
              /* :: */[
                item,
                sack[1]
              ]
            ]];
  } else {
    return /* None */0;
  }
}

function findBest_(_i, sack, _items) {
  while(true) {
    var items = _items;
    var i = _i;
    if (items) {
      var match = willFit(sack, items[0]);
      if (match !== 0) {
        return /* Some */[i];
      } else {
        _items = items[1];
        _i = i + 1 | 0;
        continue ;
        
      }
    } else {
      return /* None */0;
    }
  };
}

function findBest(sack, items) {
  return findBest_(0, sack, items);
}

function pack(_sack, _items) {
  while(true) {
    var items = _items;
    var sack = _sack;
    var match = findBest_(0, sack, items);
    if (match) {
      var i = match[0];
      var item = BatList.at(items, i);
      var s = Option.$$default(sack, append(sack, item));
      var match$1 = willFit(sack, item);
      var xs = match$1 !== 0 ? BatList.remove_at(i, items) : items;
      _items = xs;
      _sack = s;
      continue ;
      
    } else {
      return /* tuple */[
              sack,
              items
            ];
    }
  };
}

var BasicKnapsack = /* module */[
  /* append */append,
  /* findBest */findBest,
  /* pack */pack
];

exports.Make          = Make;
exports.BasicItem     = BasicItem;
exports.BasicKnapsack = BasicKnapsack;
/* BatList Not a pure module */
