// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var List       = require("bs-platform/lib/js/list.js");
var Util       = require("./util.js");
var Curry      = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function Make(funarg) {
  var totalItemSize = function (param) {
    return List.fold_left((function (acc, i) {
                  return acc + Curry._1(funarg[/* size */0], i) | 0;
                }), 0, param);
  };
  var filledSpace = function (param) {
    return totalItemSize(param[/* items */1]);
  };
  var emptySpace = function (sack) {
    return sack[/* size */0] - filledSpace(sack) | 0;
  };
  var make = function (size) {
    return /* record */[
            /* size */size,
            /* items : [] */0
          ];
  };
  var map = function (f, sack) {
    var items = Curry._1(f, sack[/* items */1]);
    var match = +(totalItemSize(items) <= sack[/* size */0]);
    if (match !== 0) {
      return /* record */[
              /* size */sack[/* size */0],
              /* items */items
            ];
    } else {
      return sack;
    }
  };
  var bind = function (sack, f) {
    var newSack = Curry._1(f, sack);
    var match = +(totalItemSize(newSack[/* items */1]) <= newSack[/* size */0]);
    if (match !== 0) {
      return newSack;
    } else {
      return sack;
    }
  };
  var $$return = function (items) {
    return /* record */[
            /* size */totalItemSize(items),
            /* items */items
          ];
  };
  var m = function (_i, w, items) {
    while(true) {
      var i = _i;
      if (i !== 0) {
        var item = List.nth(items, i - 1 | 0);
        var wi = Curry._1(funarg[/* size */0], item);
        var vi = Curry._1(funarg[/* value */1], item);
        if (wi > w) {
          _i = i - 1 | 0;
          continue ;
          
        } else {
          return Pervasives.max(m(i - 1 | 0, w, items), m(i - 1 | 0, w - wi | 0, items) + vi | 0);
        }
      } else {
        return 0;
      }
    };
  };
  var mem_m = Util.memoize(m);
  var accept = function (_i, w, items, _a) {
    while(true) {
      var a = _a;
      var i = _i;
      if (i !== 0) {
        var item = List.nth(items, i - 1 | 0);
        var rejected = a[1];
        var accepted = a[0];
        var match = +(Curry._3(mem_m, i, w, items) === Curry._3(mem_m, i - 1 | 0, w, items));
        if (match !== 0) {
          _a = /* tuple */[
            accepted,
            /* :: */[
              item,
              rejected
            ]
          ];
          _i = i - 1 | 0;
          continue ;
          
        } else {
          _a = /* tuple */[
            /* :: */[
              item,
              accepted
            ],
            rejected
          ];
          _i = i - 1 | 0;
          continue ;
          
        }
      } else {
        return a;
      }
    };
  };
  var pack = function (sack, items) {
    var match = accept(List.length(items), emptySpace(sack), items, /* tuple */[
          /* [] */0,
          /* [] */0
        ]);
    return /* tuple */[
            /* record */[
              /* size */sack[/* size */0],
              /* items */List.append(sack[/* items */1], match[0])
            ],
            match[1]
          ];
  };
  return /* module */[
          /* make */make,
          /* filledSpace */filledSpace,
          /* map */map,
          /* bind */bind,
          /* >>= */bind,
          /* return */$$return,
          /* pack */pack
        ];
}

function size(param) {
  return param[/* weight */0];
}

function value(param) {
  return param[/* value */1];
}

function sort(param, param$1) {
  var s1 = param$1[/* weight */0];
  var s0 = param[/* weight */0];
  var match = +(s0 === s1);
  if (match !== 0) {
    return param[/* value */1] - param$1[/* value */1] | 0;
  } else {
    return s0 - s1 | 0;
  }
}

var BasicItem = /* module */[
  /* size */size,
  /* value */value,
  /* sort */sort
];

function totalItemSize(param) {
  return List.fold_left((function (acc, i) {
                return acc + size(i) | 0;
              }), 0, param);
}

function filledSpace(param) {
  return totalItemSize(param[/* items */1]);
}

function emptySpace(sack) {
  return sack[/* size */0] - filledSpace(sack) | 0;
}

function make(size) {
  return /* record */[
          /* size */size,
          /* items : [] */0
        ];
}

function map(f, sack) {
  var items = Curry._1(f, sack[/* items */1]);
  var match = +(totalItemSize(items) <= sack[/* size */0]);
  if (match !== 0) {
    return /* record */[
            /* size */sack[/* size */0],
            /* items */items
          ];
  } else {
    return sack;
  }
}

function bind(sack, f) {
  var newSack = Curry._1(f, sack);
  var match = +(totalItemSize(newSack[/* items */1]) <= newSack[/* size */0]);
  if (match !== 0) {
    return newSack;
  } else {
    return sack;
  }
}

function $$return(items) {
  return /* record */[
          /* size */totalItemSize(items),
          /* items */items
        ];
}

function m(_i, w, items) {
  while(true) {
    var i = _i;
    if (i !== 0) {
      var item = List.nth(items, i - 1 | 0);
      var wi = size(item);
      var vi = value(item);
      if (wi > w) {
        _i = i - 1 | 0;
        continue ;
        
      } else {
        return Pervasives.max(m(i - 1 | 0, w, items), m(i - 1 | 0, w - wi | 0, items) + vi | 0);
      }
    } else {
      return 0;
    }
  };
}

var mem_m = Util.memoize(m);

function accept(_i, w, items, _a) {
  while(true) {
    var a = _a;
    var i = _i;
    if (i !== 0) {
      var item = List.nth(items, i - 1 | 0);
      var rejected = a[1];
      var accepted = a[0];
      var match = +(Curry._3(mem_m, i, w, items) === Curry._3(mem_m, i - 1 | 0, w, items));
      if (match !== 0) {
        _a = /* tuple */[
          accepted,
          /* :: */[
            item,
            rejected
          ]
        ];
        _i = i - 1 | 0;
        continue ;
        
      } else {
        _a = /* tuple */[
          /* :: */[
            item,
            accepted
          ],
          rejected
        ];
        _i = i - 1 | 0;
        continue ;
        
      }
    } else {
      return a;
    }
  };
}

function pack(sack, items) {
  var match = accept(List.length(items), emptySpace(sack), items, /* tuple */[
        /* [] */0,
        /* [] */0
      ]);
  return /* tuple */[
          /* record */[
            /* size */sack[/* size */0],
            /* items */List.append(sack[/* items */1], match[0])
          ],
          match[1]
        ];
}

var BasicKnapsack = /* module */[
  /* make */make,
  /* filledSpace */filledSpace,
  /* map */map,
  /* bind */bind,
  /* >>= */bind,
  /* return */$$return,
  /* pack */pack
];

exports.Make          = Make;
exports.BasicItem     = BasicItem;
exports.BasicKnapsack = BasicKnapsack;
/* mem_m Not a pure module */
